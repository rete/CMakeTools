# Protect against multiple inclusions...
if( CMAKETOOLS_MACROS_INCLUDED )
    return()
endif()
set( CMAKETOOLS_MACROS_INCLUDED True )

set( CMAKETOOLS_DIR ${CMAKE_CURRENT_LIST_DIR}/.. )
get_filename_component( CMAKETOOLS_DIR ${CMAKETOOLS_DIR} ABSOLUTE )
set( CMAKETOOLS_DIR ${CMAKETOOLS_DIR} CACHE STRING "Path to CMakeTools root directory" )
set( CMAKETOOLS_MACROS_DIR ${CMAKETOOLS_DIR}/Macros CACHE STRING "Path to CMakeTools macros directory" )
set( CMAKETOOLS_TEMPLATES_DIR ${CMAKETOOLS_DIR}/Templates CACHE STRING "Path to CMakeTools templates directory" )
set( CMAKETOOLS_MODULES_DIR ${CMAKETOOLS_DIR}/Modules CACHE STRING "Path to CMakeTools modules directory" )

cmake_policy( SET CMP0057 NEW )

# Construct the project short version
if( ${${PROJECT_NAME}_VERSION_PATCH} GREATER 0 )
    set( ${PROJECT_NAME}_VERSION_SHORT ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH} )
elseif( ${${PROJECT_NAME}_VERSION_MINOR} GREATER 0 )
    set( ${PROJECT_NAME}_VERSION_SHORT ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR} )
else()
    set( ${PROJECT_NAME}_VERSION_SHORT ${${PROJECT_NAME}_VERSION_MAJOR} )
endif()

set( ${PROJECT_NAME}_VERSION_SHORT ${${PROJECT_NAME}_VERSION_SHORT} CACHE STRING "The project short version number" FORCE )

# include all functions and macros
include(cmaketools_get_architecture)
include(cmaketools_configure_doxyfile)
include(cmaketools_generate_package_doxygen)
include(cmaketools_add_doxygen_input)
include(cmaketools_setup_build)
include(cmaketools_declare_options)
include(cmaketools_set_cxx_standard)
include(cmaketools_set_compiler_flags)
include(cmaketools_import_environment)
include(cmaketools_print_env)
include(cmaketools_aux_source_directory)
include(cmaketools_add_library)
include(cmaketools_add_header_only_library)
include(cmaketools_add_executable)
include(cmaketools_generate_moc_files)
include(cmaketools_generate_ui_headers)
include(cmaketools_generate_rcc_headers)
include(cmaketools_install_library)
include(cmaketools_install_executable)
include(cmaketools_install_includes)
include(cmaketools_generate_standard_config)
include(cmaketools_export_config_variable)
include(cmaketools_export_env_variable)
include(cmaketools_install_imported_targets)
include(cmaketools_add_test)
include(cmaketools_try_compile_test)
include(cmaketools_generate_version_file)
include(cmaketools_use_modules)

# Get the architecture vars and cache the result for further usage
cmaketools_get_architecture( CMAKETOOLS_PLATFORM CMAKETOOLS_KERNEL CMAKETOOLS_ARCHITECTURE )
string(TIMESTAMP CMAKETOOLS_RELEASE_DATE "%Y-%m-%d")
set( CMAKETOOLS_PLATFORM       ${CMAKETOOLS_PLATFORM}                   CACHE STRING "The OS platform (e.g Ubuntu-22.04_64)" FORCE )
set( CMAKETOOLS_KERNEL         ${CMAKETOOLS_KERNEL}                     CACHE STRING "The OS kernel version" FORCE )
set( CMAKETOOLS_ARCHITECTURE   ${CMAKETOOLS_ARCHITECTURE}               CACHE STRING "The OS architecture bits (32 or 64)" FORCE )
set( CMAKETOOLS_RELEASE_DATE   ${CMAKETOOLS_RELEASE_DATE}               CACHE STRING "The release date of the ${PROJECT_NAME} project" FORCE )
message( STATUS "Platform: ${CMAKETOOLS_PLATFORM}")
message( STATUS "Kernel version: ${CMAKETOOLS_KERNEL}")
message( STATUS "Architecture: ${CMAKETOOLS_ARCHITECTURE}")
message( STATUS "Release date: ${CMAKETOOLS_RELEASE_DATE}")
